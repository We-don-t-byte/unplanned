// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// TODO
// add locales to datetimes
// add specific datatypes (specially for strings)
// follow some specific style guide for postgres

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Recommendation {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  store     Store    @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId   String
  createdAt DateTime @default(now())
  data      Json
}

model User {
  id          String               @id @default(cuid())
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  employers   EmployeesByCompany[]
  likes       Likes[]
  preferences Json?
  numRecommendations Int @default(10)
  lastRecommendation DateTime @default(now())

  // next-auth model requiremente
  name            String?
  email           String?          @unique
  emailVerified   DateTime?
  image           String?
  accounts        Account[]
  sessions        Session[]
  recommendations Recommendation[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Company {
  id          String               @id @default(cuid())
  name        String
  email       String               @unique
  phoneNumber String
  verified    Boolean
  employees   EmployeesByCompany[]
  stores      Store[]
}

model EmployeesByCompany {
  employee   User     @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  employeeId String
  role       String
  createdAt  DateTime @default(now())
  company    Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId  String

  @@id([employeeId, companyId])
}

model Store {
  id              String           @id @default(cuid())
  mapsId          String           @unique
  company         Company?          @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId       String?
  locationId      String
  profile         StoreProfile?
  listing         Json
  likedBy         Likes[]
  categories      Category[]
  recommendations Recommendation[]
}

model StoreProfile {
  id          String   @id @default(cuid())
  store       Store    @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId     String   @unique
  Description String
  imgIDs      String[]
}

model Likes {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  store     Store    @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId   String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
}

model Category {
  id     String  @id @default(cuid())
  name   String  @unique
  stores Store[]
}
